import CacheBuffer from './cache-buffer';
import { RecordBase } from './record-define';
declare type ValueNotesFunc = (this: DataBase) => string;
export interface DataOptions {
}
export declare abstract class DataBase {
    readonly name: string;
    value?: any;
    len?: number;
    readonly desc?: string;
    valueNotes?: ValueNotesFunc;
    constructor(name: string);
    constructor(name: string, desc?: string, valueNotes?: ValueNotesFunc);
    constructor(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number);
    toValueString(): string;
    toValueNotes(): string;
    toDescript(): string;
    toString(): string;
    abstract parse(buf: CacheBuffer): number;
}
export declare abstract class DataArrayBase<T extends DataBase> extends DataBase {
    readonly record: RecordBase;
    readonly indexName: string;
    readonly value: T[];
    protected type: new (name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number) => T;
    constructor(record: RecordBase, name: string, indexName: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number);
    toValueString(): string;
    toValueNotes(): string;
    toDescript(): string;
    toString(): string;
    parse(buf: CacheBuffer): number;
    abstract makeItem(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number): T;
}
export declare class UInt8Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class Int8Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class UInt16Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class Int16Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class UInt32Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class Int32Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class FloatData extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class DoubleData extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class FixedStringData extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class VariableStringData extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class DateData extends DataBase {
    constructor(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number, value?: any);
    parse(buf: CacheBuffer): number;
}
export declare class BufferData extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class Buffer2Data extends DataBase {
    parse(buf: CacheBuffer): number;
}
export declare class UInt8DataArray extends DataArrayBase<UInt8Data> {
    makeItem(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number): UInt8Data;
}
export declare class UInt16DataArray extends DataArrayBase<UInt16Data> {
    makeItem(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number): UInt16Data;
}
export declare class UInt32DataArray extends DataArrayBase<UInt32Data> {
    makeItem(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number): UInt32Data;
}
export declare class FloatDataArray extends DataArrayBase<FloatData> {
    makeItem(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number): FloatData;
}
export declare class VariableStringDataArray extends DataArrayBase<VariableStringData> {
    makeItem(name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number): VariableStringData;
}
export {};
