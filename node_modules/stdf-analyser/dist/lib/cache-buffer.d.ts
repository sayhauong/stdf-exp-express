/// <reference types="node" />
import { Buffer } from 'buffer';
export declare const ERR_OUT_OF_LENGTH: string;
export declare const ERR_OUT_OF_LIMIT: string;
export declare const BYTE_ORDER_AUTO: number;
export declare const BYTE_ORDER_LE: number;
export declare const BYTE_ORDER_BE: number;
export interface CacheBufferOptions {
    bufferSize?: number;
    byteOrder?: number;
}
export default class CacheBuffer {
    maxSize: number;
    byteOrder: number;
    pos: number;
    end: number;
    limitSize: number;
    buffer: Buffer;
    constructor(opts?: CacheBufferOptions);
    length(): number;
    setByteOrder(order: number): void;
    setLimitSize(limit: number): void;
    resetLimitSize(): void;
    shift(diff: number): number;
    push(buf: Buffer, start?: number): number;
    pop(pos?: number): number;
    check(len: number): void;
    readString(len: number, encoding?: BufferEncoding): string;
    readInt8(): number;
    readUInt8(): number;
    readInt16(): number;
    readUInt16(): number;
    readInt32(): number;
    readUInt32(): number;
    readDate(): Date;
    readFloat(): number;
    readDouble(): number;
    readBuffer(len: number): Buffer;
}
