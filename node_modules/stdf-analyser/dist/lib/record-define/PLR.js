"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const data_define_1 = require("../data-define");
const _1 = require(".");
class PLRRecord extends _1.RecordBase {
    constructor() {
        super('PLR', _1.RecordType.REC_TYPE_1, _1.RecordSub.REC_SUB_63, 'Pin List Record');
        this.addField(new data_define_1.UInt16Data('GRP_CNT', 'Count (k) of pins or pin groups'));
        this.addField(new data_define_1.UInt16DataArray(this, 'GRP_INDX', 'GRP_CNT', 'Array of pin or pin group indexes'));
        this.addField(new data_define_1.UInt16DataArray(this, 'GRP_MODE', 'GRP_CNT', 'Operating mode of pin group'));
        this.addField(new data_define_1.UInt8DataArray(this, 'GRP_RADX', 'GRP_CNT', 'Display radix of pin group'));
        this.addField(new data_define_1.VariableStringDataArray(this, 'PGM_CHAR', 'GRP_CNT', 'Program state encoding characters'));
        this.addField(new data_define_1.VariableStringDataArray(this, 'RTN_CHAR', 'GRP_CNT', 'Return state encoding characters'));
        this.addField(new data_define_1.VariableStringDataArray(this, 'PGM_CHAL', 'GRP_CNT', 'Program state encoding characters'));
        this.addField(new data_define_1.VariableStringDataArray(this, 'RTN_CHAL', 'GRP_CNT', 'Return state encoding characters'));
    }
}
exports.default = PLRRecord;
