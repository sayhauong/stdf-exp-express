"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const data_define_1 = require("../data-define");
const _1 = require(".");
function ValueNotes_MODE_COD() {
    switch (this.value) {
        case 'A':
            return 'AEL mode';
        case 'C':
            return 'Checker mode';
        case 'D':
            return 'Development/Debug mode';
        case 'E':
            return 'Engineering mode';
        case 'M':
            return 'Maintenance mode';
        case 'P':
            return 'Production test mode';
        case 'Q':
            return 'Quality Control';
        default:
            return 'unknown mode';
    }
}
function ValueNotes_RTST_COD() {
    switch (this.value) {
        case 'Y':
            return 'Yes';
        case 'N':
            return 'No';
        case ' ':
            return 'unknown';
        default:
            return this.value;
    }
}
function ValueNotes_PROT_COD() {
    if (this.value === ' ') {
        return _1.FIELD_VALUE_INVALID_DEFAULT;
    }
    return this.value;
}
function ValueNotes_BURN_TIM() {
    if (this.value === 65535) {
        return _1.FIELD_VALUE_INVALID_DEFAULT;
    }
    return this.value;
}
class MIRRecord extends _1.RecordBase {
    constructor() {
        super('MIR', _1.RecordType.REC_TYPE_1, _1.RecordSub.REC_SUB_10, 'Master Information Record');
        this.addField(new data_define_1.DateData('SETUP_T', 'Date and time of job setup'));
        this.addField(new data_define_1.DateData('START_T', 'Date and time first part tested'));
        this.addField(new data_define_1.UInt8Data('STAT_NUM', 'Tester station number'));
        this.addField(new data_define_1.FixedStringData('MODE_COD', 'Test mode code (e.g. prod or dev)', ValueNotes_MODE_COD, 1));
        this.addField(new data_define_1.FixedStringData('RTST_COD', 'Lot retest code', ValueNotes_RTST_COD, 1));
        this.addField(new data_define_1.FixedStringData('PROT_COD', 'Data protection code', ValueNotes_PROT_COD, 1));
        this.addField(new data_define_1.UInt16Data('BURN_TIM', 'Burn-in time (in minutes)', ValueNotes_BURN_TIM));
        this.addField(new data_define_1.FixedStringData('CMOD_COD', 'Command mode code', undefined, 1));
        this.addField(new data_define_1.VariableStringData('LOT_ID', 'Lot ID (customer specified)'));
        this.addField(new data_define_1.VariableStringData('PART_TYP', 'Part Type (or product ID)'));
        this.addField(new data_define_1.VariableStringData('NODE_NAM', 'Name of node that generated data'));
        this.addField(new data_define_1.VariableStringData('TSTR_TYP', 'Tester type'));
        this.addField(new data_define_1.VariableStringData('JOB_NAM', 'Job name (test program name)'));
        this.addField(new data_define_1.VariableStringData('JOB_REV', '(test program) revision number'));
        this.addField(new data_define_1.VariableStringData('SBLOT_ID', 'Sublot ID length'));
        this.addField(new data_define_1.VariableStringData('OPER_NAM', 'Operator name or ID (at setup time)'));
        this.addField(new data_define_1.VariableStringData('EXEC_TYP', 'Tester executive software type'));
        this.addField(new data_define_1.VariableStringData('EXEC_VER', ' Tester exec software version number'));
        this.addField(new data_define_1.VariableStringData('TEST_COD', 'Test phase or step code'));
        this.addField(new data_define_1.VariableStringData('TST_TEMP', 'Test temperature'));
        this.addField(new data_define_1.VariableStringData('USER_TXT', 'Generic user text'));
        this.addField(new data_define_1.VariableStringData('AUX_FILE', 'Name of auxiliary data file'));
        this.addField(new data_define_1.VariableStringData('PKG_TYP', 'Package type'));
        this.addField(new data_define_1.VariableStringData('FAMLY_ID', 'Product family ID'));
        this.addField(new data_define_1.VariableStringData('DATE_COD', 'Date code'));
        this.addField(new data_define_1.VariableStringData('FACIL_ID', 'Test facility ID'));
        this.addField(new data_define_1.VariableStringData('FLOOR_ID', 'Test floor ID'));
        this.addField(new data_define_1.VariableStringData('PROC_ID', 'Fabrication process ID'));
        this.addField(new data_define_1.VariableStringData('OPER_FRQ', 'Operation frequency or step'));
        this.addField(new data_define_1.VariableStringData('SPEC_NAM', 'Test specification name'));
        this.addField(new data_define_1.VariableStringData('SPEC_VER', 'Test specification version number'));
        this.addField(new data_define_1.VariableStringData('FLOW_ID', 'Test flow ID'));
        this.addField(new data_define_1.VariableStringData('SETUP_ID', 'Test setup ID'));
        this.addField(new data_define_1.VariableStringData('DSGN_REV', 'Device design revision'));
        this.addField(new data_define_1.VariableStringData('ENG_ID', 'Engineering lot ID'));
        this.addField(new data_define_1.VariableStringData('ROM_COD', 'ROM code ID'));
        this.addField(new data_define_1.VariableStringData('SERL_NUM', 'Tester serial number'));
        this.addField(new data_define_1.VariableStringData('SUPR_NAM', 'Supervisor name or ID'));
    }
}
exports.default = MIRRecord;
