import CacheBuffer from "../cache-buffer";
import { DataBase } from "../data-define";
export declare const RecordType: {
    REC_TYPE_0: number;
    REC_TYPE_1: number;
    REC_TYPE_2: number;
    REC_TYPE_5: number;
    REC_TYPE_10: number;
    REC_TYPE_15: number;
    REC_TYPE_20: number;
    REC_TYPE_50: number;
    REC_TYPE_180: number;
    REC_TYPE_181: number;
};
export declare const RecordSub: {
    REC_SUB_10: number;
    REC_SUB_15: number;
    REC_SUB_20: number;
    REC_SUB_30: number;
    REC_SUB_40: number;
    REC_SUB_50: number;
    REC_SUB_60: number;
    REC_SUB_62: number;
    REC_SUB_63: number;
    REC_SUB_70: number;
    REC_SUB_80: number;
};
export declare const ParseResult: {
    NOTHING: number;
    FULL: number;
    PART: number;
};
export declare const FIELD_VALUE_INVALID_DEFAULT: string;
export declare class RecordBase {
    readonly name: string;
    readonly recType: number;
    readonly recSub: number;
    readonly desc?: string;
    readonly fields: DataBase[];
    parseResult: number;
    constructor(name: string, recType: number, recSub: number, desc?: string);
    parse(buffer: CacheBuffer, limit?: number): void;
    addField(field: DataBase): void;
    toString(): string;
}
