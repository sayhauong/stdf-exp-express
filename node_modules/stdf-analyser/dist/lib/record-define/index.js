"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordBase = exports.FIELD_VALUE_INVALID_DEFAULT = exports.ParseResult = exports.RecordSub = exports.RecordType = void 0;
exports.RecordType = {
    REC_TYPE_0: 0,
    REC_TYPE_1: 1,
    REC_TYPE_2: 2,
    REC_TYPE_5: 5,
    REC_TYPE_10: 10,
    REC_TYPE_15: 15,
    REC_TYPE_20: 20,
    REC_TYPE_50: 50,
    REC_TYPE_180: 180,
    REC_TYPE_181: 181,
};
exports.RecordSub = {
    REC_SUB_10: 10,
    REC_SUB_15: 15,
    REC_SUB_20: 20,
    REC_SUB_30: 30,
    REC_SUB_40: 40,
    REC_SUB_50: 50,
    REC_SUB_60: 60,
    REC_SUB_62: 62,
    REC_SUB_63: 63,
    REC_SUB_70: 70,
    REC_SUB_80: 80
};
exports.ParseResult = {
    NOTHING: 0,
    FULL: 1,
    PART: 2
};
exports.FIELD_VALUE_INVALID_DEFAULT = '-';
class RecordBase {
    constructor(name, recType, recSub, desc) {
        this.fields = [];
        this.parseResult = exports.ParseResult.NOTHING;
        this.name = name;
        this.recType = recType;
        this.recSub = recSub;
        this.desc = desc;
    }
    parse(buffer, limit) {
        if (limit)
            buffer.setLimitSize(limit);
        try {
            for (let field of this.fields) {
                field.parse(buffer);
            }
        }
        catch (e) {
            this.parseResult = exports.ParseResult.PART;
            // throw e
        }
        finally {
            if (limit)
                buffer.resetLimitSize();
        }
        this.parseResult = exports.ParseResult.FULL;
    }
    addField(field) {
        this.fields.push(field);
    }
    toString() {
        let ret = '---- [' + this.name + '](' + (this.parseResult === exports.ParseResult.PART ? 'p' : (this.parseResult === exports.ParseResult.FULL ? 'f' : 'n')) + ') ----\n'; // + (this.desc || '') + '\n';
        for (let field of this.fields) {
            ret = ret.concat(field.toString() + '\n');
        }
        return ret;
    }
}
exports.RecordBase = RecordBase;
