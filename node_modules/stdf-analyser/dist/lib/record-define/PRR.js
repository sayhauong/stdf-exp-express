"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const data_define_1 = require("../data-define");
const _1 = require(".");
function ValueNotes_U2() {
    if (this.value === 65535) {
        return _1.FIELD_VALUE_INVALID_DEFAULT;
    }
    return this.value.toString();
}
function ValueNotes_U4() {
    if (this.value === 0) {
        return _1.FIELD_VALUE_INVALID_DEFAULT;
    }
    return this.value.toString();
}
function ValueNotes_I2() {
    if (this.value === -32768) {
        return _1.FIELD_VALUE_INVALID_DEFAULT;
    }
    return this.value.toString();
}
class PRRRecord extends _1.RecordBase {
    constructor() {
        super('PRR', _1.RecordType.REC_TYPE_5, _1.RecordSub.REC_SUB_20, 'Part Results Record');
        this.addField(new data_define_1.UInt8Data('HEAD_NUM', 'Test head number'));
        this.addField(new data_define_1.UInt8Data('SITE_NUM', 'Test site number'));
        // this.addField(new FixedStringData('PART_FLG', 'Part information flag', undefined, 1))
        this.addField(new data_define_1.UInt8Data('PART_FLG', 'Part information flag'));
        this.addField(new data_define_1.UInt16Data('NUM_TEST', 'Number of tests executed'));
        this.addField(new data_define_1.UInt16Data('HARD_BIN', 'Hardware bin number'));
        this.addField(new data_define_1.UInt16Data('SOFT_BIN', 'Software bin number', ValueNotes_U2));
        this.addField(new data_define_1.Int16Data('X_COORD', '(Wafer) X coordinate', ValueNotes_U4));
        this.addField(new data_define_1.Int16Data('Y_COORD', '(Wafer) Y coordinate', ValueNotes_U4));
        this.addField(new data_define_1.UInt32Data('TEST_T', 'Elapsed test time in milliseconds', ValueNotes_I2));
        this.addField(new data_define_1.VariableStringData('PART_ID', 'Part identification'));
        this.addField(new data_define_1.VariableStringData('ART_TXT', 'Part description text'));
        this.addField(new data_define_1.BufferData('PART_FIX', 'Part repair information'));
    }
}
exports.default = PRRRecord;
