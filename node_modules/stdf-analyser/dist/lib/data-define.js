"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableStringDataArray = exports.FloatDataArray = exports.UInt32DataArray = exports.UInt16DataArray = exports.UInt8DataArray = exports.Buffer2Data = exports.BufferData = exports.DateData = exports.VariableStringData = exports.FixedStringData = exports.DoubleData = exports.FloatData = exports.Int32Data = exports.UInt32Data = exports.Int16Data = exports.UInt16Data = exports.Int8Data = exports.UInt8Data = exports.DataArrayBase = exports.DataBase = void 0;
const record_define_1 = require("./record-define");
function DateNotesFunc() {
    const d = this.value;
    return d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2)
        + ' ' + ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2) + ':' + ('0' + d.getSeconds()).slice(-2);
}
class DataBase {
    constructor(name, desc, valueNotes, len, value) {
        this.value = undefined;
        this.len = undefined;
        this.name = name;
        this.value = value || undefined;
        this.len = len || undefined;
        this.desc = desc || undefined;
        this.valueNotes = valueNotes || undefined;
        if (this.valueNotes) {
            this.valueNotes.bind(this);
        }
    }
    toValueString() { return (this.value !== undefined ? this.value.toString() : record_define_1.FIELD_VALUE_INVALID_DEFAULT); }
    toValueNotes() { return this.valueNotes ? this.valueNotes() : this.toValueString(); }
    toDescript() { return this.name + ' - ' + this.desc || ''; }
    toString() { return this.name + ' : ' + (this.valueNotes ? this.valueNotes() : this.toValueString()); }
}
exports.DataBase = DataBase;
class DataArrayBase extends DataBase {
    constructor(record, name, indexName, desc, valueNotes, len) {
        super(name, desc, valueNotes, len);
        this.value = [];
        this.record = record;
        this.indexName = indexName;
    }
    toValueString() {
        let ret = '[' + this.value.length + ']';
        for (let item of this.value) {
            ret = ret.concat(item.toValueString() + '|');
        }
        return ret;
    }
    toValueNotes() {
        let ret = '[' + this.value.length + ']';
        for (let item of this.value) {
            ret = ret.concat(item.valueNotes ? item.valueNotes() : item.toValueString() + '|');
        }
        return ret;
    }
    toDescript() {
        return this.name + ' - ' + this.desc || '';
    }
    toString() {
        let ret = this.name + ' items(' + this.value.length + '):\n';
        for (let item of this.value) {
            ret = ret.concat(item.name + ': ' + (item.valueNotes ? item.valueNotes() : item.toValueString()) + '\n');
        }
        ret = ret.concat('-- end');
        return ret;
    }
    parse(buf) {
        var _a;
        const count = (_a = this.record.fields.find(element => element.name === this.indexName)) === null || _a === void 0 ? void 0 : _a.value;
        let ret = 0;
        for (let i = 0; i < count; ++i) {
            // const item: T = new this.type('item' + i, undefined, this.valueNotes, this.len)
            const item = this.makeItem('item' + i, undefined, this.valueNotes, this.len);
            ret += item.parse(buf);
            this.value.push(item);
        }
        this.len = ret;
        return ret;
    }
}
exports.DataArrayBase = DataArrayBase;
class UInt8Data extends DataBase {
    parse(buf) {
        this.value = buf.readUInt8();
        this.len = 1;
        return 1;
    }
}
exports.UInt8Data = UInt8Data;
class Int8Data extends DataBase {
    parse(buf) {
        this.value = buf.readInt8();
        this.len = 1;
        return 1;
    }
}
exports.Int8Data = Int8Data;
class UInt16Data extends DataBase {
    parse(buf) {
        this.value = buf.readUInt16();
        this.len = 2;
        return 2;
    }
}
exports.UInt16Data = UInt16Data;
class Int16Data extends DataBase {
    parse(buf) {
        this.value = buf.readInt16();
        this.len = 2;
        return 2;
    }
}
exports.Int16Data = Int16Data;
class UInt32Data extends DataBase {
    parse(buf) {
        this.value = buf.readUInt32();
        this.len = 4;
        return 4;
    }
}
exports.UInt32Data = UInt32Data;
class Int32Data extends DataBase {
    parse(buf) {
        this.value = buf.readInt32();
        this.len = 4;
        return 4;
    }
}
exports.Int32Data = Int32Data;
class FloatData extends DataBase {
    parse(buf) {
        this.value = buf.readFloat();
        this.len = 4;
        return 4;
    }
}
exports.FloatData = FloatData;
class DoubleData extends DataBase {
    parse(buf) {
        this.value = buf.readDouble();
        this.len = 8;
        return 8;
    }
}
exports.DoubleData = DoubleData;
class FixedStringData extends DataBase {
    parse(buf) {
        this.value = buf.readString(this.len);
        return this.len;
    }
}
exports.FixedStringData = FixedStringData;
class VariableStringData extends DataBase {
    parse(buf) {
        const len = buf.readUInt8();
        this.value = buf.readString(len);
        this.len = len + 1;
        return len + 1;
    }
}
exports.VariableStringData = VariableStringData;
class DateData extends DataBase {
    constructor(name, desc, valueNotes, len, value) {
        super(name, desc, valueNotes, len);
        this.valueNotes = this.valueNotes || DateNotesFunc;
    }
    parse(buf) {
        this.value = buf.readDate();
        this.len = 4;
        return 4;
    }
}
exports.DateData = DateData;
class BufferData extends DataBase {
    parse(buf) {
        const len = buf.readUInt8();
        this.value = buf.readBuffer(len);
        this.len = len + 1;
        return len + 1;
    }
}
exports.BufferData = BufferData;
class Buffer2Data extends DataBase {
    parse(buf) {
        const len = buf.readUInt16();
        this.value = buf.readBuffer(len);
        this.len = len + 2;
        return len + 2;
    }
}
exports.Buffer2Data = Buffer2Data;
class UInt8DataArray extends DataArrayBase {
    makeItem(name, desc, valueNotes, len) {
        return new UInt8Data(name, desc, valueNotes, len);
    }
}
exports.UInt8DataArray = UInt8DataArray;
class UInt16DataArray extends DataArrayBase {
    makeItem(name, desc, valueNotes, len) {
        return new UInt16Data(name, desc, valueNotes, len);
    }
}
exports.UInt16DataArray = UInt16DataArray;
class UInt32DataArray extends DataArrayBase {
    makeItem(name, desc, valueNotes, len) {
        return new UInt32Data(name, desc, valueNotes, len);
    }
}
exports.UInt32DataArray = UInt32DataArray;
class FloatDataArray extends DataArrayBase {
    makeItem(name, desc, valueNotes, len) {
        throw new FloatData(name, desc, valueNotes, len);
    }
}
exports.FloatDataArray = FloatDataArray;
class VariableStringDataArray extends DataArrayBase {
    makeItem(name, desc, valueNotes, len) {
        return new VariableStringData(name, desc, valueNotes, len);
    }
}
exports.VariableStringDataArray = VariableStringDataArray;
// type UInt16DataArray = new (record: RecordBase, name: string, indexName: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number) => DataArrayBase<UInt16Data> 
//     // type!: new (name: string, desc?: string, valueNotes?: ValueNotesFunc, len?: number) => T
// const a = new UInt16DataArray(null, '', '')
