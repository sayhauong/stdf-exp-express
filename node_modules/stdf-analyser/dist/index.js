"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STDFAnalyser = exports.Record = void 0;
const cache_buffer_1 = __importStar(require("./lib/cache-buffer"));
const Record = __importStar(require("./lib/record-define"));
const helper_1 = require("./lib/record-define/helper");
exports.Record = __importStar(require("./lib/record-define"));
const defaultAnalyserOptions = {
    bufferSize: 64 * 1024,
    byteOrder: cache_buffer_1.BYTE_ORDER_AUTO,
    allCallback: false
};
class STDFAnalyser {
    constructor(opts) {
        this.opts = defaultAnalyserOptions;
        this.checkByteOrder = false;
        this.size = 0;
        this.opts = Object.assign(Object.assign({}, defaultAnalyserOptions), opts);
        // if (opts) {
        //     this.opts.bufferSize = opts.bufferSize || this.opts.bufferSize
        //     this.opts.byteOrder = opts.byteOrder || this.opts.byteOrder
        //     this.opts.allCallback = opts.allCallback || this.opts.allCallback
        //     this.opts.included = opts.included
        //     this.opts.excluded = opts.excluded
        // }
        this.buffer = new cache_buffer_1.default({
            bufferSize: this.opts.bufferSize,
            byteOrder: this.opts.byteOrder, // || BYTE_ORDER_AUTO           
        });
    }
    updateIncluded(included) {
        this.opts.included = included;
    }
    updateExcluded(excluded) {
        this.opts.excluded = excluded;
    }
    analyse(chunk, callback) {
        if (this.checkByteOrder === false && this.opts.byteOrder === cache_buffer_1.BYTE_ORDER_AUTO) {
            this.buffer.setByteOrder(chunk[0] == 0 ? cache_buffer_1.BYTE_ORDER_BE : cache_buffer_1.BYTE_ORDER_LE);
            this.checkByteOrder = true;
        }
        if (callback) {
            this.parseChunk(chunk, callback);
        }
        else {
            const ret = [];
            this.parseChunk(chunk, (record => {
                ret.push(record);
            }));
            return Promise.resolve(ret);
        }
    }
    parseChunk(chunk, callback) {
        do {
            this.size += this.buffer.push(chunk, this.size);
            let record = undefined;
            do {
                record = this.parseRecord();
                if (record && (this.opts.allCallback || record.parseResult !== Record.ParseResult.NOTHING)) {
                    callback(record);
                }
            } while (record);
        } while (this.size < chunk.length);
        this.size = 0;
    }
    analyseSync(chunk, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.checkByteOrder === false && this.opts.byteOrder === cache_buffer_1.BYTE_ORDER_AUTO) {
                this.buffer.setByteOrder(chunk[0] == 0 ? cache_buffer_1.BYTE_ORDER_BE : cache_buffer_1.BYTE_ORDER_LE);
                this.checkByteOrder = true;
            }
            do {
                this.size += this.buffer.push(chunk, this.size);
                let record = undefined;
                do {
                    record = this.parseRecord();
                    if (record && (this.opts.allCallback || record.parseResult !== Record.ParseResult.NOTHING)) {
                        yield callback(record);
                    }
                } while (record);
            } while (this.size < chunk.length);
            this.size = 0;
        });
    }
    parseRecord() {
        if (this.buffer.length() < 4)
            return undefined;
        const len = this.buffer.readUInt16();
        if (len > this.buffer.length()) {
            this.buffer.shift(-2);
            return undefined;
        }
        const type = this.buffer.readUInt8();
        const sub = this.buffer.readUInt8();
        if (len > (this.buffer.length())) {
            this.buffer.shift(-4);
            return undefined;
        }
        let ret = (0, helper_1.makeRecord)(type, sub);
        if ((!this.opts.included && !this.opts.excluded)
            || ((!this.opts.included || this.opts.included.indexOf(ret.name) !== -1)
                && (!this.opts.excluded || this.opts.excluded.indexOf(ret.name) === -1))) {
            ret.parse(this.buffer, len + 4);
        }
        this.buffer.pop(len + 4);
        return ret;
    }
}
exports.STDFAnalyser = STDFAnalyser;
