/// <reference types="node" />
import CacheBuffer from "./lib/cache-buffer";
import * as Record from "./lib/record-define";
export * as Record from "./lib/record-define";
export interface STDFAnalyserOptions {
    bufferSize?: number;
    byteOrder?: number;
    included?: string[];
    excluded?: string[];
    allCallback?: boolean;
}
export declare type STDFAnalyserCallback = (record: Record.RecordBase) => void;
export declare type STDFAnalyserSyncCallback = (record: Record.RecordBase) => Promise<void>;
export declare class STDFAnalyser {
    opts: STDFAnalyserOptions;
    checkByteOrder: boolean;
    buffer: CacheBuffer;
    size: number;
    constructor(opts?: STDFAnalyserOptions);
    updateIncluded(included: string[]): void;
    updateExcluded(excluded: string[]): void;
    analyse(chunk: Buffer, callback?: STDFAnalyserCallback): Promise<Record.RecordBase[]> | void;
    private parseChunk;
    analyseSync(chunk: Buffer, callback: STDFAnalyserSyncCallback): Promise<void>;
    private parseRecord;
}
